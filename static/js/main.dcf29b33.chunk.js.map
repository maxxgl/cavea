{"version":3,"sources":["cruceumClient/index.ts","routes.ts","App/ErrorBoundary.tsx","App/AppContainer.tsx","LandingPage/index.tsx","App/index.tsx","serviceWorker.ts","index.tsx"],"names":["client","endpoint","a","url","options","fetch","response","ok","Error","statusText","json","data","error","console","useClient","params","useState","setResponse","setError","isLoading","setIsLoading","useEffect","then","getTournamentList","getTournament","id","ROUTES","control","tournament","swarm","ErrorBoundary","state","hasError","errorInfo","log","this","props","children","React","Component","Container","Styled","div","AppContainer","TurneyEntry","TournamentList","Object","entries","map","key","tourney","active","to","name","entrys","length","LandingPage","Tournament","lazy","App","fallback","path","routes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.dcf29b33.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst BASE_URL = 'https://cruceum.herokuapp.com';\n\ntype ClientFn = (url: string, params?: object) => [\n  any, // fetch result\n  {\n    error: string | null,\n    isLoading: boolean\n  }\n];\n\ninterface IClientResult {\n  data: any;\n  error: string | null;\n}\n\n/*\n * Base client and hooks wrapper\n */\n\nexport const client = async (endpoint: string): Promise<IClientResult> => {\n  try {\n    const url = `${BASE_URL}/${endpoint}/`;\n    const options: RequestInit = { };\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n      throw Error(response.statusText);\n    }\n    \n    const data = await response.json();\n\n    return { data, error: null }\n  } catch (error) {\n    console.error(`SDK error: ${endpoint}`, error);\n\n    return { data: null, error }\n  }\n};\n\nconst useClient: ClientFn = (endpoint, params) => {\n  const [response, setResponse] = useState<object | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    client(endpoint)\n      .then(({ data, error }) => {\n        setResponse(data);\n        setError(error);\n      });\n    setIsLoading(false)\n  }, [endpoint]);\n\n  return [response, { error, isLoading }];\n};\n\n/* eslint-disable react-hooks/rules-of-hooks */\nexport default {\n  getTournamentList: () => useClient('tournament'),\n  getTournament: (id?: string) => useClient(`tournament/${id}`),\n}\n/* eslint-enable react-hooks/rules-of-hooks */\n","const ROUTES = {\n  control: '/control',\n  tournament: '/tournament',\n  swarm: '/swarm',\n};\n\nexport default ROUTES;\n","import React from 'react';\n\ninterface IState {\n  hasError: boolean;\n}\n\nexport default class ErrorBoundary extends React.Component<{}, IState> {\n  public state = { hasError: false };\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: object) {\n    console.log(error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Failure</h1>;\n    }\n\n    return this.props.children; \n  }\n}","import React from 'react';\nimport Styled from 'styled-components';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport ErrorBoundary from './ErrorBoundary';\n\nconst Container = Styled.div`\n  padding: 1em;\n`;\n\nconst AppContainer: React.FC = props => (\n  <ErrorBoundary>\n    <Router>\n      <Container>\n        {props.children}\n      </Container>\n    </Router>\n  </ErrorBoundary>\n)\n\nexport default AppContainer;\n","import * as React from 'react';\nimport useClient from 'cruceumClient';\nimport Styled from 'styled-components';\nimport { Link } from 'react-router-dom';\nimport ROUTES from 'routes';\n\nconst TurneyEntry = Styled.div`\n  border: solid black 1px;\n  padding: 1em;\n  margin: 2em 1em;\n`;\n\ninterface ILanddingPage {\n  data: any;\n}\n\nconst TournamentList: React.FC<ILanddingPage> = ({ data }) => {\n  if (typeof data !== 'object') {\n    return <h2>Error</h2>\n  }\n\n  return (\n    <div>\n      {Object.entries(data).map(([key, tourney]: [string, any]) => (\n        tourney.active ? (\n          <Link to={`${ROUTES.tournament}/${key}`} key={tourney.name}>\n            <TurneyEntry>\n              <div>{tourney.name}</div>\n              <div>Entries: {tourney.entrys.length}</div>\n            </TurneyEntry>\n          </Link>\n        ) :\n        (\n          <TurneyEntry key={tourney.name}>\n            <div>{tourney.name}</div>\n            <div>Entries: {tourney.entrys.length}</div>\n          </TurneyEntry>\n        )\n      ))}\n    </div>\n  )\n};\n\nconst LandingPage: React.FC = () => {\n  const [data, { isLoading }] = useClient.getTournamentList();\n\n  if (isLoading) {\n    return <h2>Loading...</h2>\n  }\n  \n  return (\n    <div>\n      <h1>Open Tournaments</h1>\n      <TournamentList data={data || []} />\n    </div>\n  );\n}\n\nexport default LandingPage;\n","import React, { Suspense, lazy } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport routes from 'routes';\n\nimport AppContainer from './AppContainer';\nimport LandingPage from 'LandingPage';\n\nconst Tournament = lazy(() => import('Tournament'));\n\nconst App: React.FC = () => (\n  <AppContainer>\n    <Suspense fallback={<div>Loading...</div>}>\n      <Switch>\n        <Route path={`${routes.tournament}/:id`}>\n          <Tournament />\n        </Route>\n        <Switch>\n          <LandingPage />\n        </Switch>\n      </Switch>\n    </Suspense>\n  </AppContainer>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from 'App';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}